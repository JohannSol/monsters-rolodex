{"version":3,"sources":["components/card-list/card.component.jsx","components/card-list/card-list.component.jsx","components/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","className","alt","src","this","props","monster","id","name","email","Component","CardList","monsters","map","item","Search","placeholder","handleChange","type","onChange","App","updateQuery","e","setState","searchField","target","value","state","fetch","then","response","json","users","newArr","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAeeA,G,YAZf,uKAEQ,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BC,KAAKC,MAAMC,QAAQC,GAA7C,eACtB,6BAAKH,KAAKC,MAAMC,QAAQE,OACxB,4BAAIJ,KAAKC,MAAMC,QAAQG,eANvC,GAA0BC,cCWXC,G,MAVf,uKAEQ,OACI,qBAAKV,UAAY,YAAjB,SACKG,KAAKC,MAAMO,SAASC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAoBR,QAAWQ,GAApBA,EAAKP,aAJjE,GAA8BG,cCFjBK,G,MAAS,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC7B,OACI,8BACI,uBAAOhB,UAAU,SACTiB,KAAK,SAASV,KAAK,WACnBQ,YAAaA,EACbG,SAAUF,QC8BnBG,E,kDAhCb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAWRgB,YAAc,SAACC,GACb,EAAKC,SAAS,CACZC,YAAcF,EAAEG,OAAOC,SAZzB,EAAKC,MAAQ,CACTf,SAAW,GACXY,YAAc,IAJD,E,gEAOE,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEX,SAAWoB,S,+BAOlC,IAAD,EAC2B5B,KAAKuB,MAA/Bf,EADD,EACCA,SAAUY,EADX,EACWA,YAEZS,EAASrB,EAASsB,QAAO,SAAA5B,GAAO,OAAIA,EAAQE,KAAK2B,cAChCC,SAASZ,EAAYW,kBAC5C,OACI,sBAAKlC,UAAU,MAAf,UACE,oBAAIA,UAAU,YAAd,8BACA,cAAC,EAAD,CAAQgB,aAAcb,KAAKiB,YAAaL,YAAc,oBACtD,cAAC,EAAD,CAAUJ,SAAYqB,W,GA3BdvB,aCOH2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.593e7beb.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './card.styles.css' // the path is relative to the calling file.\r\n\r\nexport class Card extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"card-container\">\r\n                <img alt=\"monster\" src={`https://robohash.org/${this.props.monster.id}?set=set2`}/>\r\n                <h2>{this.props.monster.name}</h2>\r\n                <p>{this.props.monster.email}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card\r\n","import React, { Component } from 'react'\r\nimport Card from './card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport class CardList extends Component {\r\n    render() {\r\n        return (\r\n            <div className = \"card-list\">\r\n                {this.props.monsters.map(item => <Card key={item.id} monster = {item}/> )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CardList;","import './search.styles.css'\r\n\r\nexport const Search = ({placeholder, handleChange}) => { //this destructures the props, assigning them to the variables given here.\r\n        return (\r\n            <div>\r\n                <input className=\"search\" \r\n                        type=\"search\" name=\"monsters\" \r\n                        placeholder={placeholder} \r\n                        onChange={handleChange}/>\r\n            </div>\r\n        )\r\n}\r\n\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport { Search } from './components/search.component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n        monsters : [],\n        searchField : ''\n    }\n  }\n  componentDidMount() { // returns a promise\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters : users}))  \n  }\n  updateQuery = (e) => {\n    this.setState({ \n      searchField : e.target.value,\n    })\n  }\n  render() {\n    const { monsters, searchField } = this.state // this is called destructuring. This is the same as\n    // const monsters = this.state.monsters etc...\n    const newArr = monsters.filter(monster => monster.name.toLowerCase()\n                          .includes(searchField.toLowerCase()))\n    return (\n        <div className=\"App\">\n          <h1 className=\"App-title\">Monsters Rolodex</h1>\n          <Search handleChange={this.updateQuery} placeholder = \"search monsters\"/>\n          <CardList monsters = {newArr} />\n        </div>\n      );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}